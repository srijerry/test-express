name: Deploy to Amazon ECS
on:
  push:
    branches:         
    - 'main' 

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      IMAGE_REPO: 982210731409.dkr.ecr.us-east-1.amazonaws.com
      IMAGE_NAME: demo_ecs_app
      IMAGE_TAG: 1.0.${{ github.run_number }}

    steps:
      - uses: actions/checkout@v2

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ID }}

      - name: Login to Docker
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.IMAGE_REPO }}

      - name: Build the Docker image
        run: docker build -f Dockerfile . --tag ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      #     output: ./trivy-results
      #     severity: HIGH,CRITICAL
      #     exit-code: 0

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push to Amazon ECR
        run: |
          docker push ${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition app.json \
      #     --query taskDefinition > .github/workflow/app.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def-1
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: ${{ env.ECS_TD }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def-1.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true


  test:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}

      - uses: actions/checkout@v2
      
      - name: Terraform Init
        run: |
          terraform init

      - name: Terraform Fmt
        run: |
          terraform fmt

      - name: Terraform Plan
        run: |
          terraform plan

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve